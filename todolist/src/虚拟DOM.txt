虚拟DOM在数据与模板更新中起到的作用

方法1
1. state 数据
2. JSX模板
3. 数据 + 模板 结合， 生成真实的DOM， 来显示
4. state 发生改变
5. 数据 + 模板 结合， 生成真实的DOM， 替换原始的DOM

缺陷：
第一次生成一个完整的DOM片段
第二次生成一个完整的DOM片段
第二次的DOM替换第一次的DOM, 非常耗性能


方法2
1. state 数据
2. JSX模板
3. 数据 + 模板 结合， 生成真实的DOM， 来显示
4. state 发生改变
5. 数据 + 模板 结合， 生成真实的DOM， 并不直接替换原始的DOM
6. 新的DOM （DocumentFragment） 和原始的DOM 作比对， 找差异  （作比对这一点，损耗了新的性能）
7. 找出input框发生了变化
8. 只用新的DOM中的input元素，替换掉老的DOM中的input元素

缺陷：
性能的提升并不明显


方法3
1. state 数据
2. JSX模板

3. 生成虚拟DOM （虚拟DOM就是一个JS对象， 用它来描述真实DOM）（损耗了性能，极低）
['div', {id: 'abc'}], ['span', {}, 'hello world']]

4. 用虚拟DOM的结构生成真实的DOM， 来显示
<div id='abc'><span>hello world</span></div>

5. state 发生变化

6. 数据 + 模板 生成新的虚拟DOM （极大的提升了性能）
['div', {id: 'abc'}, ['span', {}, 'bye bye']]

7. 比较原始虚拟DOM和新的虚拟DOM的区别， 找到区别是span中的内容 (极大的提升了性能)
用到Diff算法， diff算法同层比对虚拟DOM树， 有key值是为了更快的找到新旧dom树相同的节点，其实就是提升diff算法性能

8. 直接操作DOM， 改变span中的内容

JSX -> JS对象 -> 真实的DOM

虚拟DOM提升性能的本质：减少真实DOM的创建和比较，取而代之生成js对象和对比js对象，从而提升性能。
优点：1. 性能提升了
     2. 它使得跨端应用得以实现， React Native